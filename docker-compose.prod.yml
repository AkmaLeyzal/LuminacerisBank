version: '3.8'

services:
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf  # Mount konfigurasi Nginx
    depends_on:
      - auth_service
      - user_management_service
      - account_service
      - transaction_service
      - payment_service
      - card_management_service
      - loan_service
      - notification_service
      - audit_service
      - fraud_detection_service
      - support_service
    networks:
      - backend

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRESQL_PASSWORD} 
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  mongodb:
    image: mongo:4.4
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}  # MongoDB username dari secrets
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}  # MongoDB password dari secrets
    volumes:
      - mongodb_data:/data/db
    networks:
      - backend

  redis:
    image: redis:6.2
    command: redis-server --requirepass ${REDIS_PASSWORD}  # Redis password dari secrets
    networks:
      - backend

  auth_service:
    build:
      context: ./services/auth_service
      dockerfile: Dockerfile
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_NAME=auth_db
      - DATABASE_USER=auth_user
      - DATABASE_PASSWORD=${AUTH_DB_PASSWORD}  # Password untuk Auth Service dari secrets
      - SECRET_KEY=${SECRET_KEY_AUTH_SERVICE}  # Secret Key dari secrets
    depends_on:
      - postgres
    networks:
      - backend

  user_management_service:
    build:
      context: ./services/user_management_service
      dockerfile: Dockerfile
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_NAME=user_management_db
      - DATABASE_USER=user_mgmt_user
      - DATABASE_PASSWORD=${USER_DB_PASSWORD}  # Password untuk User Management dari secrets
      - SECRET_KEY=${SECRET_KEY_USER_SERVICE}  # Secret Key dari secrets
    depends_on:
      - postgres
    networks:
      - backend

  account_service:
    build:
      context: ./services/account_service
      dockerfile: Dockerfile
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_NAME=account_db
      - DATABASE_USER=account_user
      - DATABASE_PASSWORD=${ACCOUNT_DB_PASSWORD}  # Password untuk Account Service dari secrets
      - SECRET_KEY=${SECRET_KEY_ACCOUNT_SERVICE}  # Secret Key dari secrets
    depends_on:
      - postgres
    networks:
      - backend

  transaction_service:
    build:
      context: ./services/transaction_service
      dockerfile: Dockerfile
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_NAME=transaction_db
      - DATABASE_USER=transaction_user
      - DATABASE_PASSWORD=${TRANSACTION_DB_PASSWORD}  # Password untuk Transaction Service dari secrets
      - SECRET_KEY=${SECRET_KEY_TRANSACTION_SERVICE}  # Secret Key dari secrets
    depends_on:
      - postgres
    networks:
      - backend

  payment_service:
    build:
      context: ./services/payment_service
      dockerfile: Dockerfile
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_NAME=payment_db
      - DATABASE_USER=payment_user
      - DATABASE_PASSWORD=${PAYMENT_DB_PASSWORD}  # Password untuk Payment Service dari secrets
      - SECRET_KEY=${SECRET_KEY_PAYMENT_SERVICE}  # Secret Key dari secrets
    depends_on:
      - postgres
    networks:
      - backend

  card_management_service:
    build:
      context: ./services/card_management_service
      dockerfile: Dockerfile
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_NAME=card_management_db
      - DATABASE_USER=card_user
      - DATABASE_PASSWORD=${CARD_DB_PASSWORD}  # Password untuk Card Management Service dari secrets
      - SECRET_KEY=${SECRET_KEY_CARD_SERVICE}  # Secret Key dari secrets
    depends_on:
      - postgres
    networks:
      - backend

  loan_service:
    build:
      context: ./services/loan_service
      dockerfile: Dockerfile
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_NAME=loan_db
      - DATABASE_USER=loan_user
      - DATABASE_PASSWORD=${LOAN_DB_PASSWORD}  # Password untuk Loan Service dari secrets
      - SECRET_KEY=${SECRET_KEY_LOAN_SERVICE}  # Secret Key dari secrets
    depends_on:
      - postgres
    networks:
      - backend

  notification_service:
    build:
      context: ./services/notification_service
      dockerfile: Dockerfile
    environment:
      - DATABASE_HOST=akmaleyzaldatabases.lfu1fxc.mongodb.net
      - DATABASE_NAME=notification_db
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
      - SECRET_KEY=${SECRET_KEY_NOTIFICATION_SERVICE}
    depends_on:
      - mongodb
    networks:
      - backend

  audit_service:
    build:
      context: ./services/audit_service
      dockerfile: Dockerfile
    environment:
      - DATABASE_HOST=akmaleyzaldatabases.lfu1fxc.mongodb.net
      - DATABASE_NAME=audit_db
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
      - SECRET_KEY=${SECRET_KEY_AUDIT_SERVICE}
    depends_on:
      - mongodb
    networks:
      - backend

  fraud_detection_service:
    build:
      context: ./services/fraud_detection_service
      dockerfile: Dockerfile
    environment:
      - DATABASE_HOST=akmaleyzaldatabases.lfu1fxc.mongodb.net
      - DATABASE_NAME=fraud_db
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SECRET_KEY=${SECRET_KEY_FRAUD_SERVICE}
    depends_on:
      - kafka
    networks:
      - backend

  support_service:
    build:
      context: ./services/support_service
      dockerfile: Dockerfile
    environment:
      - DATABASE_HOST=akmaleyzaldatabases.lfu1fxc.mongodb.net
      - DATABASE_NAME=support_db
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
      - SECRET_KEY=${SECRET_KEY_SUPPORT_SERVICE}
    depends_on:
      - mongodb
    networks:
      - backend

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: kafka
    depends_on:
      - zookeeper
    networks:
      - backend

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - backend

volumes:
  postgres_data:
  mongodb_data:

networks:
  backend:
    driver: bridge
